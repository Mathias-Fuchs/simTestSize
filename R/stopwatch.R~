#' stopwatch
#'
#' measures computer time for learning and testing.
#' @param learningAlgorithm a function that takes learning data as argument and outputs a prediction rule in the form of another function that maps test data to numeric vectors. These can be errors or AUCs, one for each testing data set.
#' @param drawFunction a function that returns a dataframe with the response variable in a column names y
#' @param g the learning sample sizelearningAlgorithm, drawFunction, Nwithin=12, Nbetween=17)
#' @param testChunkSize the sample size of a single test chunk
#' @param ... additional parameters to be passed to the drawing function
#' @return a list with the times A and B in nanoseconds
#' @examples
#' stopwatch(
#' learningAlgorithm=svmLearning,
#' drawFunction=drawLogit,
#' g=20,
#' testChunkSize=1
#' )
#' @export

stopwatch <- function(learningAlgorithm, drawFunction, g, testChunkSize, ...) {
                                        # A is the learning time
    A <- mean(microbenchmark::microbenchmark(predictionRule <- learningAlgorithm(drawFunction(n=g, ...)))$time)
    
                                        # B is the drawing and testing time, for a fixed prediction rule.
    predictionRule <- learningAlgorithm(drawFunction(n=g, ...))
    B <- mean(microbenchmark::microbenchmark(error <- predictionRule(drawFunction(n=testChunkSize, ...)), times=1000)$time)
    list(
        A=A,
        B=B
    )
}
